name: Build Tvheadend CI

on:
  pull_request:
    branches:
      - master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  # auto-cancel previous runs if the pull request is force-push updated
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build-raspberry:
    runs-on: ubuntu-latest
    continue-on-error: true
    name: Build on Raspberry Pi ${{ matrix.arch }}
    strategy:
      matrix:
        arch: [armv6l, armv7l, aarch64]
        include:
        - arch: armv6l
          cpu: arm1176
          base_image: raspios_lite:latest
          cpu_info: cpuinfo/raspberrypi_zero_w
        - arch: armv7l
          cpu: cortex-a7
          base_image: raspios_lite:latest
          cpu_info: cpuinfo/raspberrypi_3b
        - arch: aarch64
          cpu: cortex-a53
          base_image: raspios_lite_arm64:latest
          cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: pguyot/arm-runner-action@v2
      with:
        base_image: ${{ matrix.base_image }}
        cpu: ${{ matrix.cpu }}
        cpu_info: ${{ matrix.cpu_info }}
        image_additional_mb: 10000
        copy_artifact_path: ../tvheadend*.deb
        import_github_env: true
        commands: |
          sudo apt-get update -y
          sudo apt-get install --force-yes -y cmake git build-essential pkg-config gettext libavahi-client-dev libssl-dev zlib1g-dev wget bzip2 git-core liburiparser-dev libdvbcsa-dev python3 python3-requests debhelper ccache lsb-release libc6-dev-armel-cross curl
          DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y libpcre3-dev || DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y libpcre2-dev
          AUTOBUILD_CONFIGURE_EXTRA=--enable-ccache\ --enable-ffmpeg_static\ --enable-hdhomerun_static\ --python=python3 ./Autobuild.sh -p raspios
          echo "Running basic functionality tests..."
          support/test_basic_functionality.sh
          support/cloudsmith.sh -n -p raspios -f '../tvheadend*.deb'
    - uses: actions/upload-artifact@v4
      with:
        name: Tvheadend-RPiOS-${{ matrix.arch }}
        path: tvheadend*.deb
        if-no-files-found: error

  build-crosscompile:
    # The host should always be linux
    runs-on: ubuntu-latest
    continue-on-error: true
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    # Run steps on a matrix
    strategy:
      matrix:
       arch: [ armv7, aarch64]
       distro: [ stretch, buster, bullseye, bookworm, ubuntu16.04, ubuntu18.04, ubuntu20.04, ubuntu22.04, ubuntu_latest ]
       include:
         - arch: armv6
           distro: stretch
         - arch: armv6
           distro: buster
         - arch: armv6
           distro: bullseye

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: uraimo/run-on-arch-action@v3
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}


          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            if [ "${{ matrix.distro }}" = "buster" ] && [ "${{ matrix.arch }}" = "armv6" ]; then
              echo "Skipping source list modification for buster on armv6"
            else
              case "${{ matrix.distro }}" in
                jessie|stretch|buster)
                  sed -i 's/archive.raspbian.org/legacy.raspbian.org/g' /etc/apt/sources.list
                  sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list
                  sed -i 's/security.debian.org/archive.debian.org/g' /etc/apt/sources.list
                  sed -i '/${{ matrix.distro }}-updates/d' /etc/apt/sources.list
                  ;;
              esac
            fi
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster|bullseye|bookworm|trixie)
                apt-get update -y
                DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y cmake git build-essential pkg-config gettext libavahi-client-dev libssl-dev zlib1g-dev wget bzip2 git-core liburiparser-dev libdvbcsa-dev python3 python3-requests debhelper ccache lsb-release libc6-dev-armel-cross curl
                DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y libpcre3-dev || DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y libpcre2-dev
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac

          # Produce a binary artifact
          run: |
            git config --global --add safe.directory /home/runner/work/tvheadend/tvheadend || true
            AUTOBUILD_CONFIGURE_EXTRA=--enable-ccache\ --enable-ffmpeg_static\ --enable-hdhomerun_static\ --python=python3 ./Autobuild.sh
            echo "Running basic functionality tests..."
            support/test_basic_functionality.sh
            cp ../tvheadend*.deb /artifacts/
            if [ '${{ matrix.distro }}' = 'buster' ] && [ '${{ matrix.arch }}' = 'armv7' ]; then update-ca-certificates --fresh; fi
            support/cloudsmith.sh -n -f '../tvheadend*.deb'
      - uses: actions/upload-artifact@v4
        with:
          name: Tvheadend-${{ matrix.distro }}-${{ matrix.arch }}
          path: artifacts/tvheadend*.deb
          if-no-files-found: error

  build-deb-native:
    runs-on: ubuntu-latest
    continue-on-error: true
    name: Build on native ${{ matrix.container[1] }}
    strategy:
      matrix:
        container: [["i386/ubuntu:trusty", "i386-ubuntu-trusty"], ["ubuntu:trusty", "ubuntu-trusty"], ["i386/ubuntu:xenial", "i386-ubuntu-xenial"], ["ubuntu:xenial", "ubuntu-xenial"], ["ubuntu:bionic", "ubuntu-bionic"], ["ubuntu:focal", "ubuntu-focal"], ["ubuntu:jammy", "ubuntu-jammy"], ["ubuntu:noble", "ubuntu-noble"], ["i386/debian:stretch", "i386-debian-strech"], ["debian:stretch", "debian-stretch"], ["i386/debian:buster", "i386-debian-buster"], ["debian:buster", "debian-buster"], ["i386/debian:bullseye", "i386-debian-bullseye"], ["debian:bullseye", "debian-bullseye"], ["i386/debian:bookworm", "i386-debian-bookworm"], ["debian:bookworm", "debian-bookworm"], ["i386/debian:trixie", "i386-debian-trixie"], ["debian:trixie", "debian-trixie"], ["i386/debian:sid", "i386-debian-sid"], ["debian:sid", "debian-sid"]]
    steps:
      - name: Setup container
        run: |
          docker pull ${{ matrix.container[0] }}
          docker run --name build-container -d -v ${{ github.workspace }}:/workspace ${{ matrix.container[0] }} tail -f /dev/null
      - name: Fix old debian apt
        if: matrix.container[0] == 'debian:stretch' || matrix.container[0] == 'i386/debian:stretch' || matrix.container[0] == 'debian:buster' || matrix.container[0] == 'i386/debian:buster'
        env:
          SCRIPT: |
            sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list
            sed -i 's/security.debian.org/archive.debian.org/g' /etc/apt/sources.list
            sed -i '/stretch-updates/d' /etc/apt/sources.list
        run: docker exec build-container bash -c "$SCRIPT"
      - name: dependencies
        env:
          SCRIPT: |
            apt-get update -y
            DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y cmake git build-essential pkg-config gettext libavahi-client-dev libssl-dev zlib1g-dev wget bzip2 git-core liburiparser-dev libdvbcsa-dev python3 python3-requests debhelper ccache lsb-release curl
        run: docker exec build-container bash -c "$SCRIPT"
      - name: pcre-dependency
        env:
          SCRIPT: |
            DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y libpcre3-dev || DEBIAN_FRONTEND=noninteractive apt-get install --force-yes -y libpcre2-dev
        run: docker exec build-container bash -c "$SCRIPT"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Workaround safe directory
        env:
          SCRIPT: |
            git config --global --add safe.directory /workspace
        run: docker exec build-container bash -c "$SCRIPT"
      - name: build
        env:
          SCRIPT: |
            cd /workspace
            AUTOBUILD_CONFIGURE_EXTRA=--enable-ccache\ --enable-ffmpeg_static\ --enable-hdhomerun_static\ --python=python3 ./Autobuild.sh ${{ (startsWith(matrix.container[0], 'i386') && '-a i386') || '' }}
        run: docker exec build-container bash -c "$SCRIPT"
      - name: test
        env:
          SCRIPT: |
            cd /workspace
            echo "Running basic functionality tests..."
            support/test_basic_functionality.sh
        run: docker exec build-container bash -c "$SCRIPT"
      - name: copy-result
        env:
          SCRIPT: |
            cp tvheadend*.deb workspace/
        run: docker exec build-container bash -c "$SCRIPT"
      - uses: actions/upload-artifact@v4
        with:
          name: Tvheadend-${{ matrix.container[1] }}
          path: tvheadend*.deb
          if-no-files-found: error
      - name: upload-cloudsmith
        env:
          SCRIPT: |
            cd /workspace
            support/cloudsmith.sh -n -f 'tvheadend*.deb'
        run: docker exec build-container bash -c "$SCRIPT"

  build-rpm-native:
    runs-on: ubuntu-latest
    continue-on-error: true
    name: Build on native fedora:${{ matrix.releasever }}
    strategy:
      matrix:
        releasever: ["37", "38", "39", "40", "41", "42", "43", "rawhide"]
    container:
      image: "fedora:${{ matrix.releasever }}"
    steps:
      - name: rpmfusion-free
        run: |
          dnf install -y "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-${{ matrix.releasever }}.noarch.rpm"
      - name: dependencies
        run: |
          dnf install -y gcc-c++ gcc-c++ which rpm-build rpmdevtools git make cmake gettext-devel dbus-devel avahi-devel openssl-devel zlib-devel libdvbcsa-devel wget bzip2 uriparser-devel pcre2-devel python python-requests ccache systemd-units systemd-devel
          dnf install -y openssl-devel-engine || true
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          tags: true
      - name: Workaround safe directory
        run: git config --global --add safe.directory "$(pwd)"
      - name: build
        run: ./configure --disable-dvbscan --disable-libfdkaac_static --disable-ffmpeg_static --disable-hdhomerun_static --disable-libfdkaac_static --disable-libopus_static --disable-libtheora_static --disable-libvorbis_static --disable-libvpx_static --disable-libx264_static --disable-libx265_static --enable-libfdkaac --enable-hdhomerun_client --enable-libsystemd_daemon --python=/usr/bin/python3 && make -C rpm build -j$(nproc) || (echo "PARALLEL BUILD FAILED, DOING SINGLE THREADED BUILD" && make -C rpm build)
      - name: test
        run: |
          echo "Running basic functionality tests..."
          echo "DEBUG: Checking rpm/BUILD structure:"
          ls -la rpm/BUILD/ 2>/dev/null || echo "rpm/BUILD does not exist"
          # For RPM builds, the binary is in the BUILD directory
          # Search more broadly - rpmbuild creates subdirs and may not preserve executable bit during build
          BUILD_BIN=$(find rpm/BUILD -name tvheadend -type f 2>/dev/null | grep -E '(build\.linux|/usr/local/bin)' | head -1)
          if [ -z "$BUILD_BIN" ]; then
            # Try without path restriction
            BUILD_BIN=$(find rpm/BUILD -path '*/build.linux/tvheadend' -type f 2>/dev/null | head -1)
          fi
          if [ -z "$BUILD_BIN" ]; then
            # Last resort - any file named tvheadend in BUILD
            BUILD_BIN=$(find rpm/BUILD -name tvheadend -type f 2>/dev/null | head -1)
          fi
          if [ -n "$BUILD_BIN" ]; then
            echo "Found RPM build binary at: $BUILD_BIN"
            chmod +x "$BUILD_BIN" 2>/dev/null || true
            TVHEADEND_BIN="$BUILD_BIN" support/test_basic_functionality.sh
          else
            echo "Binary not found in RPM BUILD directory, trying default location"
            echo "DEBUG: All files named tvheadend in rpm/:"
            find rpm/ -name tvheadend 2>/dev/null || echo "No files found"
            support/test_basic_functionality.sh
          fi
      - name: copy-result
        run: cp rpm/RPMS/*/tvheadend*.rpm .
      - uses: actions/upload-artifact@v4
        with:
          name: Tvheadend-Fedora-${{ matrix.releasever }}
          path: tvheadend*.rpm
          if-no-files-found: error
      - name: upload-cloudsmith
        run: support/cloudsmith.sh -n -f 'tvheadend*.rpm'

  build-el-rpm-native:
    continue-on-error: true
    name: Build on native almalinux:${{ matrix.releasever }} ${{ matrix.runner == 'ubuntu-latest' && 'x86_64' || 'aarch64' }}
    strategy:
      matrix:
        releasever: ["9", "10"]
        runner: ["ubuntu-latest", "ubuntu-24.04-arm"]
    runs-on: ${{ matrix.runner }}
    container:
      image: "almalinux:${{ matrix.releasever }}"
    steps:
      - name: rpmfusion-free
        run: |
          dnf install -y dnf-plugins-core
          dnf config-manager --set-enabled crb
          dnf install -y "https://download1.rpmfusion.org/free/el/rpmfusion-free-release-${{ matrix.releasever }}.noarch.rpm"
      - name: dependencies
        run: |
          dnf install -y gcc-c++ gcc-c++ which rpm-build rpmdevtools git make cmake gettext-devel dbus-devel avahi-devel openssl-devel zlib-devel libdvbcsa-devel wget bzip2 uriparser-devel pcre2-devel python python-requests ccache systemd-units systemd-devel
          dnf install -y openssl-devel-engine || true
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          tags: true
      - name: Workaround safe directory
        run: git config --global --add safe.directory "$(pwd)"
      - name: build
        run: ./configure --disable-dvbscan --disable-libfdkaac_static --disable-ffmpeg_static --disable-hdhomerun_static --disable-libfdkaac_static --disable-libopus_static --disable-libtheora_static --disable-libvorbis_static --disable-libvpx_static --disable-libx264_static --disable-libx265_static --enable-libfdkaac --enable-hdhomerun_client --enable-libsystemd_daemon --python=/usr/bin/python3 && make -C rpm build -j$(nproc)
      - name: test
        run: |
          echo "Running basic functionality tests..."
          echo "DEBUG: Checking rpm/BUILD structure:"
          ls -la rpm/BUILD/ 2>/dev/null || echo "rpm/BUILD does not exist"
          # For RPM builds, the binary is in the BUILD directory
          # Search more broadly - rpmbuild creates subdirs and may not preserve executable bit during build
          BUILD_BIN=$(find rpm/BUILD -name tvheadend -type f 2>/dev/null | grep -E '(build\.linux|/usr/local/bin)' | head -1)
          if [ -z "$BUILD_BIN" ]; then
            # Try without path restriction
            BUILD_BIN=$(find rpm/BUILD -path '*/build.linux/tvheadend' -type f 2>/dev/null | head -1)
          fi
          if [ -z "$BUILD_BIN" ]; then
            # Last resort - any file named tvheadend in BUILD
            BUILD_BIN=$(find rpm/BUILD -name tvheadend -type f 2>/dev/null | head -1)
          fi
          if [ -n "$BUILD_BIN" ]; then
            echo "Found RPM build binary at: $BUILD_BIN"
            chmod +x "$BUILD_BIN" 2>/dev/null || true
            TVHEADEND_BIN="$BUILD_BIN" support/test_basic_functionality.sh
          else
            echo "Binary not found in RPM BUILD directory, trying default location"
            echo "DEBUG: All files named tvheadend in rpm/:"
            find rpm/ -name tvheadend 2>/dev/null || echo "No files found"
            support/test_basic_functionality.sh
          fi
      - name: copy-result
        run: cp rpm/RPMS/*/tvheadend*.rpm .
      - uses: actions/upload-artifact@v4
        with:
          name: Tvheadend-el-${{ matrix.releasever }}-${{ matrix.runner == 'ubuntu-latest' && 'x86_64' || 'aarch64' }}
          path: tvheadend*.rpm
          if-no-files-found: error
      - name: upload-cloudsmith
        run: support/cloudsmith.sh -n -f 'tvheadend*.rpm'
